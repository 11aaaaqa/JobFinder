@using Web.MVC.Constants.Vacancy
@model Web.MVC.Models.ApiResponses.Vacancy.VacancyResponse
<link rel="stylesheet" href="~/css/vacancy/get-vacancy.css"/>

<div class="get-vacancy-page-block">
    <div class="vacancy-additional-info-block">
        <div class="short-vacancy-info mb-2">
            @if (Model.IsArchived)
            {
                <h3 class="mb-0" style="color: lightgray;">@Model.Position</h3>
                <p style="color: lightgray;" class="mb-1 mt-0">Вакансия в архиве</p>
            }
            else
            {
                <h3>@Model.Position</h3>
            }

            @if (Model.SalaryFrom is not null && Model.SalaryTo is not null)
            {
                @if (Model.SalaryTo == Model.SalaryFrom)
                {
                    <p class="salary format-number">@Model.SalaryFrom ₽ за месяц</p>
                }
                else
                {
                    <p class="salary format-number">@Model.SalaryFrom - @Model.SalaryTo ₽ за месяц</p>
                }
            }
            @if (Model.SalaryFrom is not null && Model.SalaryTo is null)
            {
                <p class="salary format-number">от @Model.SalaryFrom ₽ за месяц</p>
            }
            @if (Model.SalaryFrom is null && Model.SalaryTo is not null)
            {
                <p class="salary format-number">до @Model.SalaryTo ₽ за месяц</p>
            }
            @if (Model.SalaryTo is null && Model.SalaryFrom is null)
            {
                <p class="salary">Уровень дохода не указан</p>
            }

            @if (Model.WorkExperience is not null)
            {
                @if (Model.WorkExperience == WorkExperienceConstants.NoExperience)
                {
                    <p>@Model.WorkExperience</p>
                }
                else
                {
                    <p>Опыт @Model.WorkExperience.ToLower()</p>
                }
            }

            <p>@Model.EmploymentType</p>

            @if (Model.RemoteWork)
            {
                <p>Формат работы: в офисе или удаленно</p>
            }
            else
            {
                <p>Формат работы: офис</p>
            }

            @if (true)
            {
                string returnUrl = Context.Request.Path;
                if (Context.Request.QueryString.HasValue)
                    returnUrl += Context.Request.QueryString;
                <div class="vacancy-actions-block">
                    @if (ViewBag.DoesEmployerHavePermissionToEditVacancies is true)
                    {
                        <a class="vacancy-action-btn" asp-controller="Company" asp-action="EditVacancy" asp-route-vacancyId="@Model.Id">Изменить</a>
                    }

                    @if (Model.IsArchived)
                    {
                        if (ViewBag.DoesEmployerHavePermissionToArchiveAndUnarchiveVacancies is true)
                        {
                            <form method="post" asp-controller="Company" asp-action="UnarchiveVacancy"
                                  asp-route-returnUrl="@returnUrl" asp-route-vacancyId="@Model.Id">
                                <input class="vacancy-action-btn" type="submit" value="Разархивировать" />
                            </form>
                        }
                    }
                    else
                    {
                        @if (ViewBag.DoesEmployerHavePermissionToArchiveAndUnarchiveVacancies is true)
                        {
                            <form method="post" asp-controller="Company" asp-action="ArchiveVacancy"
                                  asp-route-returnUrl="@returnUrl" asp-route-vacancyId="@Model.Id">
                                <input class="vacancy-action-btn" type="submit" value="Архивировать" />
                            </form>
                        }
                    }

                    @if (ViewBag.DoesEmployerHavePermissionToDeleteVacancies is true)
                    {
                        <form method="post" asp-controller="Company" asp-action="DeleteVacancy" asp-route-vacancyId="@Model.Id">
                            <input class="vacancy-action-btn" type="submit" value="Удалить вакансию" onclick="return confirm('Вы действительно хотите удалить эту вакансию?');" />
                        </form>
                    }
                    @if (ViewBag.IsVacancyInFavorites is not null && ViewBag.IsVacancyInFavorites == true)
                    {
                        <form method="post" asp-controller="Vacancy" asp-action="RemoveVacancyFromFavorites" asp-route-returnUrl="@returnUrl">
                            <input type="hidden" name="vacancyId"  value="@Model.Id"/>
                            <input class="remove-from-favorites-action-btn" type="submit" value="✖ Удалить из избранного"/>
                        </form>
                    }
                    @if (ViewBag.IsVacancyInFavorites is not null && ViewBag.IsVacancyInFavorites == false)
                    {
                        <form method="post" asp-controller="Vacancy" asp-action="AddVacancyToFavorites" asp-route-returnUrl="@returnUrl">
                            <input type="hidden" name="vacancyId" value="@Model.Id" />
                            <input class="add-to-favorites-action-btn" type="submit" value="+ В избранное"/>
                        </form>
                    }
                </div>
            }
            @* кнопки откликнуться и написать сообщение *@
        </div>

        <div class="vacancy-company-info">
            <h5>@Model.CompanyName</h5>
            @* рейтинг и переход к отзывам *@
        </div>
    </div>
    
    @if (Model.IsArchived)
    {
        <div class="mb-3">
            <h3>Вакансия в архиве</h3>
            <p>Работодатель, вероятно, уже нашел нужного кандидата и больше не принимает отклики на эту вакансию</p>
        </div>
    }
    
    <a class="show-vacancy-description-btn" id="show-vacancy-description-btn" onclick="showVacancyDescription()">Показать описание вакансии</a>

    <div id="vacancy-description-block">
        <div>
            <p>@Html.Raw(Model.Description)</p>
        </div>
    
        @if (Model.EmployerContactEmail is not null || Model.EmployerContactPhoneNumber is not null)
        {
            <h4>Контактная информация</h4>
            if (Model.EmployerContactEmail is not null && Model.EmployerContactPhoneNumber is not null)
            {
                <p class="mb-0">Почта: @Model.EmployerContactEmail</p>
            }
            if (Model.EmployerContactEmail is not null && Model.EmployerContactPhoneNumber is null)
            {
                <p>Почта: @Model.EmployerContactEmail</p>
            }

            if (Model.EmployerContactPhoneNumber is not null)
            {
                <p>Телефон: @Model.EmployerContactPhoneNumber</p>
            }
        }
    
        @if (Model.Address is not null)
        {
            <h4>Адрес места работы</h4>
            <p>@Model.VacancyCity, @Model.Address</p>
        }
    </div>

    @switch (Model.CreatedAt.Month)
    {
        case 1:
            <p style="color: gray;">Вакансия опубликована @Model.CreatedAt.Day января @Model.CreatedAt.Year года</p>
            break;
        case 2:
            <p style="color: gray;">Вакансия опубликована @Model.CreatedAt.Day февраля @Model.CreatedAt.Year года</p>
            break;
        case 3:
            <p style="color: gray;">Вакансия опубликована @Model.CreatedAt.Day марта @Model.CreatedAt.Year года</p>
            break;
        case 4:
            <p style="color: gray;">Вакансия опубликована @Model.CreatedAt.Day апреля @Model.CreatedAt.Year года</p>
            break;
        case 5:
            <p style="color: gray;">Вакансия опубликована @Model.CreatedAt.Day мая @Model.CreatedAt.Year года</p>
            break;
        case 6:
            <p style="color: gray;">Вакансия опубликована @Model.CreatedAt.Day июня @Model.CreatedAt.Year года</p>
            break;
        case 7:
            <p style="color: gray;">Вакансия опубликована @Model.CreatedAt.Day июля @Model.CreatedAt.Year года</p>
            break;
        case 8:
            <p style="color: gray;">Вакансия опубликована @Model.CreatedAt.Day августа @Model.CreatedAt.Year года</p>
            break;
        case 9:
            <p style="color: gray;">Вакансия опубликована @Model.CreatedAt.Day сентября @Model.CreatedAt.Year года</p>
            break;
        case 10:
            <p style="color: gray;">Вакансия опубликована @Model.CreatedAt.Day октября @Model.CreatedAt.Year года</p>
            break;
        case 11:
            <p style="color: gray;">Вакансия опубликована @Model.CreatedAt.Day ноября @Model.CreatedAt.Year года</p>
            break;
        case 12:
            <p style="color: gray;">Вакансия опубликована @Model.CreatedAt.Day декабря @Model.CreatedAt.Year года</p>
            break;
    }
</div>

<script src="~/js/vacancy/format-number-displaying-in-p.js"></script>
<script>
    var isArchived = @Html.Raw(Json.Serialize(Model.IsArchived));
    var showVacancyDescriptionBtn = document.getElementById('show-vacancy-description-btn');
    var vacancyDescription = document.getElementById('vacancy-description-block');

    if (isArchived === true || isArchived.toLowerCase() === 'true') {
        showVacancyDescriptionBtn.style.display = 'block';
        vacancyDescription.style.display = 'none';
    }

    function showVacancyDescription() {
        showVacancyDescriptionBtn.style.display = 'none';
        vacancyDescription.style.display = 'block';
    }
</script>